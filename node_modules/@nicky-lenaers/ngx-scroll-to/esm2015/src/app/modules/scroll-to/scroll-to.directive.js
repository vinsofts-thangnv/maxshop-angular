/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
import { DEFAULTS, EVENTS } from './statics/scroll-to-helpers';
import { ScrollToService } from './scroll-to.service';
export class ScrollToDirective {
    /**
     * @param {?} _elementRef
     * @param {?} _scrollToService
     * @param {?} _renderer2
     */
    constructor(_elementRef, _scrollToService, _renderer2) {
        this._elementRef = _elementRef;
        this._scrollToService = _scrollToService;
        this._renderer2 = _renderer2;
        this.ngxScrollTo = DEFAULTS.target;
        this.ngxScrollToEvent = DEFAULTS.action;
        this.ngxScrollToDuration = DEFAULTS.duration;
        this.ngxScrollToEasing = DEFAULTS.easing;
        this.ngxScrollToOffset = DEFAULTS.offset;
        this.ngxScrollToOffsetMap = DEFAULTS.offsetMap;
    }
    /**
     * Angular Lifecycle Hook - After View Init
     *
     * \@todo Implement Subscription for Events
     *
     * @return {?} void
     */
    ngAfterViewInit() {
        // Test Event Support
        if (EVENTS.indexOf(this.ngxScrollToEvent) === -1)
            throw new Error(`Unsupported Event '${this.ngxScrollToEvent}'`);
        // Listen for the trigger...
        this._renderer2.listen(this._elementRef.nativeElement, this.ngxScrollToEvent, (event) => {
            this._options = {
                target: this.ngxScrollTo,
                duration: this.ngxScrollToDuration,
                easing: this.ngxScrollToEasing,
                offset: this.ngxScrollToOffset,
                offsetMap: this.ngxScrollToOffsetMap
            };
            this._scrollToService.scrollTo(this._options);
        });
    }
}
ScrollToDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngx-scroll-to]'
            },] },
];
/** @nocollapse */
ScrollToDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ScrollToService },
    { type: Renderer2 }
];
ScrollToDirective.propDecorators = {
    ngxScrollTo: [{ type: Input, args: ['ngx-scroll-to',] }],
    ngxScrollToEvent: [{ type: Input, args: ['ngx-scroll-to-event',] }],
    ngxScrollToDuration: [{ type: Input, args: ['ngx-scroll-to-duration',] }],
    ngxScrollToEasing: [{ type: Input, args: ['ngx-scroll-to-easing',] }],
    ngxScrollToOffset: [{ type: Input, args: ['ngx-scroll-to-offset',] }],
    ngxScrollToOffsetMap: [{ type: Input, args: ['ngx-scroll-to-offset-map',] }]
};
function ScrollToDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollTo;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToEvent;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToDuration;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToEasing;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToOffset;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToOffsetMap;
    /** @type {?} */
    ScrollToDirective.prototype._options;
    /** @type {?} */
    ScrollToDirective.prototype._elementRef;
    /** @type {?} */
    ScrollToDirective.prototype._scrollToService;
    /** @type {?} */
    ScrollToDirective.prototype._renderer2;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXRvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuaWNreS1sZW5hZXJzL25neC1zY3JvbGwtdG8vIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvc2Nyb2xsLXRvL3Njcm9sbC10by5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFVBQVUsRUFDVixTQUFTLEVBRVYsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUNMLFFBQVEsRUFDUixNQUFNLEVBQ1AsTUFBTSw2QkFBNkIsQ0FBQztBQVVyQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFLdEQsTUFBTTs7Ozs7O0lBc0JKLFlBQ1UsYUFDQSxrQkFDQTtRQUZBLGdCQUFXLEdBQVgsV0FBVztRQUNYLHFCQUFnQixHQUFoQixnQkFBZ0I7UUFDaEIsZUFBVSxHQUFWLFVBQVU7MkJBdEJpQixRQUFRLENBQUMsTUFBTTtnQ0FHWCxRQUFRLENBQUMsTUFBTTttQ0FHbkIsUUFBUSxDQUFDLFFBQVE7aUNBR0YsUUFBUSxDQUFDLE1BQU07aUNBR2hDLFFBQVEsQ0FBQyxNQUFNO29DQUdELFFBQVEsQ0FBQyxTQUFTO0tBU2xFOzs7Ozs7OztJQVNNLGVBQWU7O1FBR3BCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDOztRQUdsSCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQzFFLENBQUMsS0FBWSxFQUFFLEVBQUU7WUFFZixJQUFJLENBQUMsUUFBUSxHQUFHO2dCQUNkLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVztnQkFDeEIsUUFBUSxFQUFFLElBQUksQ0FBQyxtQkFBbUI7Z0JBQ2xDLE1BQU0sRUFBRSxJQUFJLENBQUMsaUJBQWlCO2dCQUM5QixNQUFNLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtnQkFDOUIsU0FBUyxFQUFFLElBQUksQ0FBQyxvQkFBb0I7YUFDckMsQ0FBQztZQUVGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQy9DLENBQUMsQ0FBQzs7OztZQXpEUixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjthQUM1Qjs7OztZQXRCQyxVQUFVO1lBa0JILGVBQWU7WUFqQnRCLFNBQVM7OzswQkF3QlIsS0FBSyxTQUFDLGVBQWU7K0JBR3JCLEtBQUssU0FBQyxxQkFBcUI7a0NBRzNCLEtBQUssU0FBQyx3QkFBd0I7Z0NBRzlCLEtBQUssU0FBQyxzQkFBc0I7Z0NBRzVCLEtBQUssU0FBQyxzQkFBc0I7bUNBRzVCLEtBQUssU0FBQywwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBJbnB1dCxcclxuICBFbGVtZW50UmVmLFxyXG4gIFJlbmRlcmVyMixcclxuICBBZnRlclZpZXdJbml0XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQge1xyXG4gIERFRkFVTFRTLFxyXG4gIEVWRU5UU1xyXG59IGZyb20gJy4vc3RhdGljcy9zY3JvbGwtdG8taGVscGVycyc7XHJcbmltcG9ydCB7XHJcbiAgU2Nyb2xsVG9Db25maWdPcHRpb25zLFxyXG4gIFNjcm9sbFRvT2Zmc2V0TWFwLFxyXG4gIFNjcm9sbFRvVGFyZ2V0XHJcbn0gZnJvbSAnLi9tb2RlbHMvc2Nyb2xsLXRvLWNvbmZpZy5tb2RlbCc7XHJcbmltcG9ydCB7XHJcbiAgU2Nyb2xsVG9BbmltYXRpb25FYXNpbmdcclxufSBmcm9tICcuL21vZGVscy9zY3JvbGwtdG8tZWFzaW5nLm1vZGVsJztcclxuaW1wb3J0IHsgU2Nyb2xsVG9FdmVudCB9IGZyb20gJy4vbW9kZWxzL3Njcm9sbC10by1ldmVudC5tb2RlbCc7XHJcbmltcG9ydCB7IFNjcm9sbFRvU2VydmljZSB9IGZyb20gJy4vc2Nyb2xsLXRvLnNlcnZpY2UnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbmd4LXNjcm9sbC10b10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTY3JvbGxUb0RpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG5cclxuICBASW5wdXQoJ25neC1zY3JvbGwtdG8nKVxyXG4gIHB1YmxpYyBuZ3hTY3JvbGxUbzogU2Nyb2xsVG9UYXJnZXQgPSBERUZBVUxUUy50YXJnZXQ7XHJcblxyXG4gIEBJbnB1dCgnbmd4LXNjcm9sbC10by1ldmVudCcpXHJcbiAgcHVibGljIG5neFNjcm9sbFRvRXZlbnQ6IFNjcm9sbFRvRXZlbnQgPSBERUZBVUxUUy5hY3Rpb247XHJcblxyXG4gIEBJbnB1dCgnbmd4LXNjcm9sbC10by1kdXJhdGlvbicpXHJcbiAgcHVibGljIG5neFNjcm9sbFRvRHVyYXRpb246IG51bWJlciA9IERFRkFVTFRTLmR1cmF0aW9uO1xyXG5cclxuICBASW5wdXQoJ25neC1zY3JvbGwtdG8tZWFzaW5nJylcclxuICBwdWJsaWMgbmd4U2Nyb2xsVG9FYXNpbmc6IFNjcm9sbFRvQW5pbWF0aW9uRWFzaW5nID0gREVGQVVMVFMuZWFzaW5nO1xyXG5cclxuICBASW5wdXQoJ25neC1zY3JvbGwtdG8tb2Zmc2V0JylcclxuICBwdWJsaWMgbmd4U2Nyb2xsVG9PZmZzZXQ6IG51bWJlciA9IERFRkFVTFRTLm9mZnNldDtcclxuXHJcbiAgQElucHV0KCduZ3gtc2Nyb2xsLXRvLW9mZnNldC1tYXAnKVxyXG4gIHB1YmxpYyBuZ3hTY3JvbGxUb09mZnNldE1hcDogU2Nyb2xsVG9PZmZzZXRNYXAgPSBERUZBVUxUUy5vZmZzZXRNYXA7XHJcblxyXG4gIHByaXZhdGUgX29wdGlvbnM6IFNjcm9sbFRvQ29uZmlnT3B0aW9ucztcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSBfc2Nyb2xsVG9TZXJ2aWNlOiBTY3JvbGxUb1NlcnZpY2UsXHJcbiAgICBwcml2YXRlIF9yZW5kZXJlcjI6IFJlbmRlcmVyMikge1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFuZ3VsYXIgTGlmZWN5Y2xlIEhvb2sgLSBBZnRlciBWaWV3IEluaXRcclxuICAgKlxyXG4gICAqIEB0b2RvIEltcGxlbWVudCBTdWJzY3JpcHRpb24gZm9yIEV2ZW50c1xyXG4gICAqXHJcbiAgICogQHJldHVybnMgdm9pZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcblxyXG4gICAgLy8gVGVzdCBFdmVudCBTdXBwb3J0XHJcbiAgICBpZiAoRVZFTlRTLmluZGV4T2YodGhpcy5uZ3hTY3JvbGxUb0V2ZW50KSA9PT0gLTEpIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgRXZlbnQgJyR7dGhpcy5uZ3hTY3JvbGxUb0V2ZW50fSdgKTtcclxuXHJcbiAgICAvLyBMaXN0ZW4gZm9yIHRoZSB0cmlnZ2VyLi4uXHJcbiAgICB0aGlzLl9yZW5kZXJlcjIubGlzdGVuKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5uZ3hTY3JvbGxUb0V2ZW50LFxyXG4gICAgICAoZXZlbnQ6IEV2ZW50KSA9PiB7XHJcblxyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSB7XHJcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMubmd4U2Nyb2xsVG8sXHJcbiAgICAgICAgICBkdXJhdGlvbjogdGhpcy5uZ3hTY3JvbGxUb0R1cmF0aW9uLFxyXG4gICAgICAgICAgZWFzaW5nOiB0aGlzLm5neFNjcm9sbFRvRWFzaW5nLFxyXG4gICAgICAgICAgb2Zmc2V0OiB0aGlzLm5neFNjcm9sbFRvT2Zmc2V0LFxyXG4gICAgICAgICAgb2Zmc2V0TWFwOiB0aGlzLm5neFNjcm9sbFRvT2Zmc2V0TWFwXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5fc2Nyb2xsVG9TZXJ2aWNlLnNjcm9sbFRvKHRoaXMuX29wdGlvbnMpO1xyXG4gICAgICB9KTtcclxuICB9XHJcbn1cclxuIl19