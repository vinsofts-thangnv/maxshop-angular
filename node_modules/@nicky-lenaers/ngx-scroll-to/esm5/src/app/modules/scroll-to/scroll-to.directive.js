/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
import { DEFAULTS, EVENTS } from './statics/scroll-to-helpers';
import { ScrollToService } from './scroll-to.service';
var ScrollToDirective = /** @class */ (function () {
    function ScrollToDirective(_elementRef, _scrollToService, _renderer2) {
        this._elementRef = _elementRef;
        this._scrollToService = _scrollToService;
        this._renderer2 = _renderer2;
        this.ngxScrollTo = DEFAULTS.target;
        this.ngxScrollToEvent = DEFAULTS.action;
        this.ngxScrollToDuration = DEFAULTS.duration;
        this.ngxScrollToEasing = DEFAULTS.easing;
        this.ngxScrollToOffset = DEFAULTS.offset;
        this.ngxScrollToOffsetMap = DEFAULTS.offsetMap;
    }
    /**
     * Angular Lifecycle Hook - After View Init
     *
     * \@todo Implement Subscription for Events
     *
     * @return {?} void
     */
    ScrollToDirective.prototype.ngAfterViewInit = /**
     * Angular Lifecycle Hook - After View Init
     *
     * \@todo Implement Subscription for Events
     *
     * @return {?} void
     */
    function () {
        var _this = this;
        // Test Event Support
        if (EVENTS.indexOf(this.ngxScrollToEvent) === -1)
            throw new Error("Unsupported Event '" + this.ngxScrollToEvent + "'");
        // Listen for the trigger...
        this._renderer2.listen(this._elementRef.nativeElement, this.ngxScrollToEvent, function (event) {
            _this._options = {
                target: _this.ngxScrollTo,
                duration: _this.ngxScrollToDuration,
                easing: _this.ngxScrollToEasing,
                offset: _this.ngxScrollToOffset,
                offsetMap: _this.ngxScrollToOffsetMap
            };
            _this._scrollToService.scrollTo(_this._options);
        });
    };
    ScrollToDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngx-scroll-to]'
                },] },
    ];
    /** @nocollapse */
    ScrollToDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ScrollToService },
        { type: Renderer2 }
    ]; };
    ScrollToDirective.propDecorators = {
        ngxScrollTo: [{ type: Input, args: ['ngx-scroll-to',] }],
        ngxScrollToEvent: [{ type: Input, args: ['ngx-scroll-to-event',] }],
        ngxScrollToDuration: [{ type: Input, args: ['ngx-scroll-to-duration',] }],
        ngxScrollToEasing: [{ type: Input, args: ['ngx-scroll-to-easing',] }],
        ngxScrollToOffset: [{ type: Input, args: ['ngx-scroll-to-offset',] }],
        ngxScrollToOffsetMap: [{ type: Input, args: ['ngx-scroll-to-offset-map',] }]
    };
    return ScrollToDirective;
}());
export { ScrollToDirective };
function ScrollToDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollTo;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToEvent;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToDuration;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToEasing;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToOffset;
    /** @type {?} */
    ScrollToDirective.prototype.ngxScrollToOffsetMap;
    /** @type {?} */
    ScrollToDirective.prototype._options;
    /** @type {?} */
    ScrollToDirective.prototype._elementRef;
    /** @type {?} */
    ScrollToDirective.prototype._scrollToService;
    /** @type {?} */
    ScrollToDirective.prototype._renderer2;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXRvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuaWNreS1sZW5hZXJzL25neC1zY3JvbGwtdG8vIiwic291cmNlcyI6WyJzcmMvYXBwL21vZHVsZXMvc2Nyb2xsLXRvL3Njcm9sbC10by5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFVBQVUsRUFDVixTQUFTLEVBRVYsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUNMLFFBQVEsRUFDUixNQUFNLEVBQ1AsTUFBTSw2QkFBNkIsQ0FBQztBQVVyQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7O0lBMkJwRCwyQkFDVSxhQUNBLGtCQUNBO1FBRkEsZ0JBQVcsR0FBWCxXQUFXO1FBQ1gscUJBQWdCLEdBQWhCLGdCQUFnQjtRQUNoQixlQUFVLEdBQVYsVUFBVTsyQkF0QmlCLFFBQVEsQ0FBQyxNQUFNO2dDQUdYLFFBQVEsQ0FBQyxNQUFNO21DQUduQixRQUFRLENBQUMsUUFBUTtpQ0FHRixRQUFRLENBQUMsTUFBTTtpQ0FHaEMsUUFBUSxDQUFDLE1BQU07b0NBR0QsUUFBUSxDQUFDLFNBQVM7S0FTbEU7Ozs7Ozs7O0lBU00sMkNBQWU7Ozs7Ozs7Ozs7UUFHcEIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXNCLElBQUksQ0FBQyxnQkFBZ0IsTUFBRyxDQUFDLENBQUM7O1FBR2xILElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFDMUUsVUFBQyxLQUFZO1lBRVgsS0FBSSxDQUFDLFFBQVEsR0FBRztnQkFDZCxNQUFNLEVBQUUsS0FBSSxDQUFDLFdBQVc7Z0JBQ3hCLFFBQVEsRUFBRSxLQUFJLENBQUMsbUJBQW1CO2dCQUNsQyxNQUFNLEVBQUUsS0FBSSxDQUFDLGlCQUFpQjtnQkFDOUIsTUFBTSxFQUFFLEtBQUksQ0FBQyxpQkFBaUI7Z0JBQzlCLFNBQVMsRUFBRSxLQUFJLENBQUMsb0JBQW9CO2FBQ3JDLENBQUM7WUFFRixLQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMvQyxDQUFDLENBQUM7OztnQkF6RFIsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7aUJBQzVCOzs7O2dCQXRCQyxVQUFVO2dCQWtCSCxlQUFlO2dCQWpCdEIsU0FBUzs7OzhCQXdCUixLQUFLLFNBQUMsZUFBZTttQ0FHckIsS0FBSyxTQUFDLHFCQUFxQjtzQ0FHM0IsS0FBSyxTQUFDLHdCQUF3QjtvQ0FHOUIsS0FBSyxTQUFDLHNCQUFzQjtvQ0FHNUIsS0FBSyxTQUFDLHNCQUFzQjt1Q0FHNUIsS0FBSyxTQUFDLDBCQUEwQjs7NEJBM0NuQzs7U0EwQmEsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgSW5wdXQsXHJcbiAgRWxlbWVudFJlZixcclxuICBSZW5kZXJlcjIsXHJcbiAgQWZ0ZXJWaWV3SW5pdFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHtcclxuICBERUZBVUxUUyxcclxuICBFVkVOVFNcclxufSBmcm9tICcuL3N0YXRpY3Mvc2Nyb2xsLXRvLWhlbHBlcnMnO1xyXG5pbXBvcnQge1xyXG4gIFNjcm9sbFRvQ29uZmlnT3B0aW9ucyxcclxuICBTY3JvbGxUb09mZnNldE1hcCxcclxuICBTY3JvbGxUb1RhcmdldFxyXG59IGZyb20gJy4vbW9kZWxzL3Njcm9sbC10by1jb25maWcubW9kZWwnO1xyXG5pbXBvcnQge1xyXG4gIFNjcm9sbFRvQW5pbWF0aW9uRWFzaW5nXHJcbn0gZnJvbSAnLi9tb2RlbHMvc2Nyb2xsLXRvLWVhc2luZy5tb2RlbCc7XHJcbmltcG9ydCB7IFNjcm9sbFRvRXZlbnQgfSBmcm9tICcuL21vZGVscy9zY3JvbGwtdG8tZXZlbnQubW9kZWwnO1xyXG5pbXBvcnQgeyBTY3JvbGxUb1NlcnZpY2UgfSBmcm9tICcuL3Njcm9sbC10by5zZXJ2aWNlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW25neC1zY3JvbGwtdG9dJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2Nyb2xsVG9EaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgQElucHV0KCduZ3gtc2Nyb2xsLXRvJylcclxuICBwdWJsaWMgbmd4U2Nyb2xsVG86IFNjcm9sbFRvVGFyZ2V0ID0gREVGQVVMVFMudGFyZ2V0O1xyXG5cclxuICBASW5wdXQoJ25neC1zY3JvbGwtdG8tZXZlbnQnKVxyXG4gIHB1YmxpYyBuZ3hTY3JvbGxUb0V2ZW50OiBTY3JvbGxUb0V2ZW50ID0gREVGQVVMVFMuYWN0aW9uO1xyXG5cclxuICBASW5wdXQoJ25neC1zY3JvbGwtdG8tZHVyYXRpb24nKVxyXG4gIHB1YmxpYyBuZ3hTY3JvbGxUb0R1cmF0aW9uOiBudW1iZXIgPSBERUZBVUxUUy5kdXJhdGlvbjtcclxuXHJcbiAgQElucHV0KCduZ3gtc2Nyb2xsLXRvLWVhc2luZycpXHJcbiAgcHVibGljIG5neFNjcm9sbFRvRWFzaW5nOiBTY3JvbGxUb0FuaW1hdGlvbkVhc2luZyA9IERFRkFVTFRTLmVhc2luZztcclxuXHJcbiAgQElucHV0KCduZ3gtc2Nyb2xsLXRvLW9mZnNldCcpXHJcbiAgcHVibGljIG5neFNjcm9sbFRvT2Zmc2V0OiBudW1iZXIgPSBERUZBVUxUUy5vZmZzZXQ7XHJcblxyXG4gIEBJbnB1dCgnbmd4LXNjcm9sbC10by1vZmZzZXQtbWFwJylcclxuICBwdWJsaWMgbmd4U2Nyb2xsVG9PZmZzZXRNYXA6IFNjcm9sbFRvT2Zmc2V0TWFwID0gREVGQVVMVFMub2Zmc2V0TWFwO1xyXG5cclxuICBwcml2YXRlIF9vcHRpb25zOiBTY3JvbGxUb0NvbmZpZ09wdGlvbnM7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgX3Njcm9sbFRvU2VydmljZTogU2Nyb2xsVG9TZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBfcmVuZGVyZXIyOiBSZW5kZXJlcjIpIHtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBbmd1bGFyIExpZmVjeWNsZSBIb29rIC0gQWZ0ZXIgVmlldyBJbml0XHJcbiAgICpcclxuICAgKiBAdG9kbyBJbXBsZW1lbnQgU3Vic2NyaXB0aW9uIGZvciBFdmVudHNcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHZvaWRcclxuICAgKi9cclxuICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG5cclxuICAgIC8vIFRlc3QgRXZlbnQgU3VwcG9ydFxyXG4gICAgaWYgKEVWRU5UUy5pbmRleE9mKHRoaXMubmd4U2Nyb2xsVG9FdmVudCkgPT09IC0xKSB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIEV2ZW50ICcke3RoaXMubmd4U2Nyb2xsVG9FdmVudH0nYCk7XHJcblxyXG4gICAgLy8gTGlzdGVuIGZvciB0aGUgdHJpZ2dlci4uLlxyXG4gICAgdGhpcy5fcmVuZGVyZXIyLmxpc3Rlbih0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHRoaXMubmd4U2Nyb2xsVG9FdmVudCxcclxuICAgICAgKGV2ZW50OiBFdmVudCkgPT4ge1xyXG5cclxuICAgICAgICB0aGlzLl9vcHRpb25zID0ge1xyXG4gICAgICAgICAgdGFyZ2V0OiB0aGlzLm5neFNjcm9sbFRvLFxyXG4gICAgICAgICAgZHVyYXRpb246IHRoaXMubmd4U2Nyb2xsVG9EdXJhdGlvbixcclxuICAgICAgICAgIGVhc2luZzogdGhpcy5uZ3hTY3JvbGxUb0Vhc2luZyxcclxuICAgICAgICAgIG9mZnNldDogdGhpcy5uZ3hTY3JvbGxUb09mZnNldCxcclxuICAgICAgICAgIG9mZnNldE1hcDogdGhpcy5uZ3hTY3JvbGxUb09mZnNldE1hcFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuX3Njcm9sbFRvU2VydmljZS5zY3JvbGxUbyh0aGlzLl9vcHRpb25zKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==